# Dockerfile (Multi-Stage)

# ---- Builder Stage ----
FROM ubuntu:24.04 AS builder
ENV DEBIAN_FRONTEND=noninteractive

# Install base build dependencies.
# We'll install meson, ninja, and pyelftools via pip in a venv.
# python3-venv is needed to create the virtual environment.
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    pkg-config \
    # Note: meson and ninja-build are removed from apt installs here
    python3 \
    python3-pip \
    python3-venv \ 
    git \
    libnuma-dev \
    libpcap-dev \
    libssl-dev \
    libjansson-dev \
    rdma-core \
    ibverbs-providers \
    # For Mellanox PMD compilation (and other RDMA-capable PMDs)
    libibverbs-dev \
    # rdma-core provides core RDMA userspace libraries and headers,
    # often pulled in by libibverbs-dev or good to have explicitly.
    rdma-core \
    && rm -rf /var/lib/apt/lists/*

# Create a virtual environment and activate it for subsequent RUN commands by adding its bin to PATH
ENV VENV_PATH=/opt/venv
RUN python3 -m venv ${VENV_PATH}
ENV PATH="${VENV_PATH}/bin:${PATH}" 

# Install Python build tools into the activated venv
# You can pin versions here if needed, e.g., meson==1.2.3
RUN pip install --no-cache-dir meson ninja pyelftools

# Copy the entire project source
COPY . /app_src
WORKDIR /app_src

# Initialize DPDK submodule
RUN git submodule update --init --recursive deps/dpdk

# Build DPDK from the submodule
# 'meson' and 'ninja' commands will now use the versions from the venv.
# The Python used by 'meson runpython' (for pmdinfogen.py) will be the venv's Python,
# which now has pyelftools.
ARG DPDK_INSTALL_PREFIX=/opt/dpdk_install
WORKDIR /app_src/deps/dpdk
RUN rm -rf build
RUN meson setup build --prefix=${DPDK_INSTALL_PREFIX} -Ddefault_library=shared \
-Ddisable_drivers=common/dpaax,bus/dpaa,mempool/dpaa,mempool/dpaa2,net/dpaa,net/dpaa2
RUN ninja -C build
RUN ninja -C build install

# Set PKG_CONFIG_PATH correctly for your application build
# This robust syntax handles if PKG_CONFIG_PATH was previously unset or empty.
ENV PKG_CONFIG_PATH_DPDK_CUSTOM=${DPDK_INSTALL_PREFIX}/lib/x86_64-linux-gnu/pkgconfig
ENV PKG_CONFIG_PATH=${PKG_CONFIG_PATH_DPDK_CUSTOM}${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}}

# Build your application 'dpdk-pot'
# 'meson' and 'ninja' will also use versions from the venv here.
WORKDIR /app_src
RUN meson setup build --wipe
RUN ninja -C build

# ---- Final Runtime Stage ----
# ... (rest of your Dockerfile: final stage FROM, COPY --from=builder, etc.) ...

# ---- Final Runtime Stage ----
FROM ubuntu:24.04

ENV DEBIAN_FRONTEND=noninteractive

# Install only runtime dependencies for DPDK, OpenSSL, and your application
RUN apt-get update && apt-get install -y --no-install-recommends \
    libnuma1 \
    libssl3 \
    libpcap0.8 \
    libjansson4 \ 
    libibverbs1 \        
    ibverbs-providers \  
    rdma-core \           
    libatomic1 \
    iproute2 \      
    tcpdump \       
    net-tools \     
    procps \        
    gdb \           
    ethtool \       
    pciutils \      
    kmod \          
    strace \        
    ltrace \        
    less \          
    vim \           
    && rm -rf /var/lib/apt/lists/*

ARG DPDK_INSTALL_PREFIX=/opt/dpdk_install 

# Copy DPDK shared libraries from the builder stage.
# The 'ninja -C build install' for DPDK in the builder stage should create
# the correct library structure, including 'dpdk/pmds-<ABI_VERSION>/'
# under its lib directory (e.g., ${DPDK_INSTALL_PREFIX}/lib/x86_64-linux-gnu/).
# Verify this path if issues arise by inspecting the builder stage.
RUN mkdir -p /usr/local/lib/x86_64-linux-gnu/
COPY --from=builder ${DPDK_INSTALL_PREFIX}/lib/x86_64-linux-gnu/* /usr/local/lib/x86_64-linux-gnu/

# Copy your compiled application binary from the builder stage
COPY --from=builder /app_src/build/dpdk-pot /usr/local/bin/dpdk-pot

# Copy dpdk-testpmdl from the builder stage
COPY --from=builder ${DPDK_INSTALL_PREFIX}/bin/dpdk-testpmd /usr/local/bin/dpdk-testpmd

# Copy default application configuration files
ARG APP_USER=dpdk
ARG APP_GROUP=dpdk
ARG APP_HOME=/opt/dpdk-pot # Your application's home/working directory
RUN mkdir -p ${APP_HOME}/config/profiles

# Your config files are in 'config/profiles' at the project root
COPY config/profiles ${APP_HOME}/config/profiles/

# Update dynamic linker cache for the newly copied DPDK libraries
RUN ldconfig

# Create a non-root user and group for the application
RUN groupadd -r ${APP_GROUP} -g 2000 && \
    useradd -r -u 2000 -g ${APP_GROUP} -m -s /sbin/nologin ${APP_USER} && \
    chown -R ${APP_USER}:${APP_GROUP} ${APP_HOME}

# Ensure the binary is executable
RUN chmod +x /usr/local/bin/dpdk-pot

WORKDIR ${APP_HOME}
USER ${APP_USER}

ENTRYPOINT ["/usr/local/bin/dpdk-pot"]
CMD ["--help"]